<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Double-bus ring resonator layout</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.exlayout.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>from pya import *

def dbl_bus_ring_res():

  # Python script to create a layout for testing a double-bus ring resonator.
  # uses:
  #  - the SiEPIC GSiP Library
  # creates the layout in the presently selected cell
  # deletes everything first

  print("EBeam.dbl_bus_ring_res")
  
  pol = 'te'
  
  if pol == 'te':
    sweep_radius = [3, 3, 3, 3, 10, 10, 10, 10]
    sweep_gap    = [0.05, 0.08, 0.1, 0.12, 0.05, 0.1, 0.15, 0.20]
    x_offset = 67
    wg_bend_radius = 5
  else:
    sweep_radius = [30, 30, 30, 30, 30, 30, 30, 30, 30]
    sweep_gap    = [0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.60, 0.65]
    x_offset = 67
    wg_bend_radius = 15
  

  from SiEPIC.utils import select_paths, get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()
  dbu = ly.dbu
  from SiEPIC.extend import to_itype
  from SiEPIC.scripts import path_to_waveguide

#  print(TECHNOLOGY['technology_name'])
  
  # clean all cells within "cell"
  ly.prune_subcells(cell.cell_index(), 10)
  
  # Layer mapping:
  LayerSi = LayerInfo(1, 0)
  LayerSiN = cell.layout().layer(LayerSi)
  fpLayer = LayerInfo(99, 0)
  fpLayerN = cell.layout().layer(fpLayer)
  TextLayer = LayerInfo(10, 0)
  TextLayerN = cell.layout().layer(TextLayer)
  
  
  # Draw floor plan
  cell.shapes(fpLayerN).insert(Box(0,0, 610*dbu, 405*dbu))
  
  # Create a sub-cell for our Ring resonator layout
  top_cell = cell
  cell = cell.layout().create_cell("RingResonator")
  if pol == 'te':
    t = Trans(Trans.R0, 40 * dbu, 12 * dbu)
  else:
    t = Trans(Trans.R180, 560 * dbu, 393 * dbu)
  # place "cell" in the top cell
  top_cell.insert(CellInstArray(cell.cell_index(), t))
  
  
  # Import cells from the SiEPIC GDS Library, and instantiate them
  
  # Grating couplers, Ports 1, 2, 3, 4 (top-down):
  GC_imported = ly.create_cell("ebeam_gc_%s1550" % pol, "EBeam").cell_index()
  print ("Cell: GC_imported: #%s" % GC_imported)
  gc_length = 41
  
  for i in range(len(sweep_gap)):
    
    # place layout at location:
    x = i * x_offset
    r = sweep_radius[i]
    g = sweep_gap[i]
  
    t = Trans(Trans.R0, to_itype(x,dbu), 0)
    cell.insert(CellInstArray(GC_imported, t, DPoint(0,127).to_itype(dbu), Point(0,0), 4, 1))
  
    # Label for automated measurements, laser on Port 2, detectors on Ports 1, 3, 4
    t = Trans(Trans.R0, to_itype(x,dbu), to_itype(127*2,dbu))
    text = Text ("opt_in_%s_1550_device_RingDouble%sr%sg%s" % (pol.upper(), pol.upper(),r,int(round(g*1000))), t)
    shape = cell.shapes(TextLayerN).insert(text)
    shape.text_size = 3*dbu
  
    # Ring resonator PCell
    wg_width = 0.5
    pcell = ly.create_cell("ebeam_dc_halfring_straight", "EBeam", { "r": r, "w": wg_width, "g": g, "silayer": LayerSi, "bustype": 0 } )
    print ("Cell: pcell: #%s" % pcell.cell_index())
    y_ring = 127*3/2
    if 2*r &lt; (gc_length+wg_bend_radius):
      t1 = Trans(Trans.R270, to_itype(x+wg_bend_radius, dbu), to_itype(y_ring, dbu))
      t2 = Trans(Trans.R90, to_itype(x+wg_bend_radius+2*r+2*g+2*wg_width, dbu), to_itype(y_ring, dbu))
    else:
      t1 = Trans(Trans.R90, to_itype(x+wg_bend_radius,dbu), to_itype(y_ring,dbu))
      t2 = Trans(Trans.R270, to_itype(x+wg_bend_radius-2*r-2*g-2*wg_width,dbu), to_itype(y_ring,dbu))
    instance = cell.insert(CellInstArray(pcell.cell_index(), t1))
    instance = cell.insert(CellInstArray(pcell.cell_index(), t2))
  
    # Create paths for waveguides
  
    # GC3 to bottom-left of ring
    dpath = DPath([DPoint(0,127), DPoint(wg_bend_radius,127), DPoint(wg_bend_radius, y_ring-1*r-1.5*wg_width)], 0.5).transformed(DTrans(DTrans.R0,x,0))
    cell.shapes(LayerSiN).insert(dpath.to_itype(dbu))
    
  
    # GC2 to top-left of ring
    dpath = DPath([DPoint(wg_bend_radius,y_ring+r+1.5*wg_width), DPoint(wg_bend_radius, 127*2), DPoint(0,127*2)], 0.5).transformed(DTrans(DTrans.R0,x,0))
    cell.shapes(LayerSiN).insert(dpath.to_itype(dbu))
  
    # GC1 to top-right of ring
    # GC4 to bottom-right of ring
    if 2*r &lt; (gc_length+wg_bend_radius):
      points_gc1 = [ DPoint(0, 127*3), DPoint(wg_bend_radius+2*r+2*g+2*wg_width,127*3), DPoint(wg_bend_radius+2*r+2*g+2*wg_width, y_ring+r+1.5*wg_width) ] 
      points_gc4 = [ DPoint(0, 0), DPoint(wg_bend_radius+2*r+2*g+2*wg_width,0), DPoint(wg_bend_radius+2*r+2*g+2*wg_width, y_ring-1*r-1.5*wg_width)  ] 
    else:
      points_gc1 = [ DPoint(0, 127*3), DPoint(wg_bend_radius+2*r+2*g+2*wg_width,127*3), DPoint(wg_bend_radius+2*r+2*g+2*wg_width, y_ring+r+1.5*wg_width) ] 
      points_gc1 = [ DPoint(0, 127*3), DPoint(wg_bend_radius,127*3), DPoint(wg_bend_radius, 127*3-2*wg_bend_radius), 
              DPoint((wg_bend_radius-2*r-2*g-2*wg_width), 127*3-2*wg_bend_radius),
              DPoint((wg_bend_radius-2*r-2*g-2*wg_width), 127*3-y_ring-1*r-1.5*wg_width)  ] 
      points_gc4 = [ DPoint(0, 0), DPoint(wg_bend_radius,0), DPoint(wg_bend_radius, 2*wg_bend_radius), 
              DPoint((wg_bend_radius-2*r-2*g-2*wg_width), 2*wg_bend_radius),
              DPoint((wg_bend_radius-2*r-2*g-2*wg_width), y_ring-1*r-1.5*wg_width)  ] 
    dpath = DPath(points_gc1, 0.5).transformed(DTrans(DTrans.R0,x,0))
    cell.shapes(LayerSiN).insert(dpath.to_itype(dbu))
    dpath = DPath(points_gc4, 0.5).transformed(DTrans(DTrans.R0,x,0))
    cell.shapes(LayerSiN).insert(dpath.to_itype(dbu))    
  
  path_to_waveguide(cell = cell)
  print ("done layout...")
  
dbl_bus_ring_res()
</text>
</klayout-macro>
